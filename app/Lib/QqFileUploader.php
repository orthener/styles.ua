<?phpApp::uses('QqUploadedFileXhr', 'Lib');App::uses('QqUploadedFileForm', 'Lib');class QqFileUploader {    private $allowedExtensions = array();    private $sizeLimit = 10485760;    private $file;        function __construct(array $allowedExtensions = array(), $sizeLimit = 10485760) {        $allowedExtensions = array_map("strtolower", $allowedExtensions);        $this->allowedExtensions = $allowedExtensions;        $this->sizeLimit = $sizeLimit;        $this->checkServerSettings();        if (isset($_GET['qqfile'])) {            $this->file = new QqUploadedFileXhr();        } elseif (isset($_FILES['qqfile'])) {            $this->file = new QqUploadedFileForm();        } else {            $this->file = false;        }    }    /**     *              * Funkcja zwraca łańcuch $srcName pozbawiony znaków,      * które mogłyby nie zostać zakceptowane przez system plików,      * lub sprawiać trudność przy wysyłaniu do przeglądarki     *     * @param object $srcName     Potencjalna nazwa pliku     *           */    function slug($srcName) {        $srcName = mb_strtolower(strip_tags($srcName));        $srcName = mb_substr($srcName, 0, 90);        $srcName = str_replace(array('--', '---', '----'), array('-', '-', '-'), $srcName);        $trans = array('ª' => 'a', 'º' => 'o', 'µ' => 'u', 'À' => 'A', 'Á' => 'A', 'Â' => 'A',            'Ä' => 'A', 'Ą' => 'A', 'Ç' => 'C', 'Ć' => 'C', 'È' => 'E', 'É' => 'E',            'Ë' => 'E', 'Ę' => 'E', 'Ì' => 'I', 'Í' => 'I', 'Î' => 'I', 'I' => 'I',            'Ł' => 'L', 'Ñ' => 'N', 'Ń' => 'N', 'Ò' => 'O', 'Ó' => 'O', 'Ô' => 'O',            'Ö' => 'O', 'Ś' => 'S', 'Ù' => 'U', 'Ú' => 'U', 'Ü' => 'U', 'Ý' => 'Y',            'Ż' => 'Z', 'Ź' => 'Z', 'ß' => 'ss', 'à' => 'a', 'á' => 'a', 'â' => 'a',            'ä' => 'a', 'ą' => 'a', 'ç' => 'c', 'ć' => 'c', 'è' => 'e', 'é' => 'e',            'ë' => 'e', 'ę' => 'e', 'í' => 'i', 'î' => 'i', 'i' => 'i', 'ł' => 'l',            'ñ' => 'n', 'ń' => 'n', 'ò' => 'o', 'ó' => 'o', 'ô' => 'o', 'ö' => 'o',            'ś' => 's', 'ù' => 'u', 'ú' => 'u', 'ü' => 'u', 'ý' => 'y', 'ż' => 'z',            'ź' => 'z');        $srcName = strtr($srcName, $trans);        return $srcName;    }    private function checkServerSettings() {        $postSize = $this->toBytes(ini_get('post_max_size'));        $uploadSize = $this->toBytes(ini_get('upload_max_filesize'));//        die("{'error':'{$postSize}' {$this->sizeLimit}}");          if ($postSize < $this->sizeLimit || $uploadSize < $this->sizeLimit) {            $size = max(1, $this->sizeLimit / 1024 / 1024) . 'M';            //die("{'error':'increase post_max_size and upload_max_filesize to $size'}");            }    }    private function toBytes($str) {        $val = trim($str);        $last = strtolower($str[strlen($str) - 1]);        switch ($last) {            case 'g': $val *= 1024;            case 'm': $val *= 1024;            case 'k': $val *= 1024;        }        return $val;    }    /**     * Returns array('success'=>true) or array('error'=>'error message')     */    function handleUpload($uploadDirectory, $replaceOldFile = FALSE) {                $uploadDirectory = WWW_ROOT.$uploadDirectory;                if(!file_exists($uploadDirectory)){                        mkdir($uploadDirectory, 0777);            chmod($uploadDirectory, 0777);        }                if (!is_writable($uploadDirectory)) {            return array('error' => "Server error. Upload directory isn't writable.");        }                        if (!$this->file) {            return array('error' => 'No files were uploaded.');        }        $size = $this->file->getSize();        if ($size == 0) {            return array('error' => 'File is empty');        }        if ($size > $this->sizeLimit) {            return array('error' => 'File is too large');        }        $pathinfo = pathinfo($this->file->getName());        $filename = $this->slug($pathinfo['filename']);        $ext = $pathinfo['extension'];        if ($this->allowedExtensions && !in_array(strtolower($ext), $this->allowedExtensions)) {            $these = implode(', ', $this->allowedExtensions);            return array('error' => 'File has an invalid extension, it should be one of ' . $these . '.');        }        if (!$replaceOldFile) {            while (file_exists($uploadDirectory . $filename . '.' . $ext)) {                $filename .= rand(1, 9999);            }        }                if ($this->file->save($uploadDirectory . $filename . '.' . $ext)) {            return array('success' => true, 'filename' => $filename . '.' . $ext);        } else {            return array('error' => 'Could not save uploaded file.' .                'The upload was cancelled, or server error encountered');        }    }}